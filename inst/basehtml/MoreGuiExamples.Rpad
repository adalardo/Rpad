<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<!-- by Tom Short, EPRI Solutions, Inc., tshort@eprisolutions..com
(c) Copyright 2005. by EPRI Solutions, Inc.

Licence
=======

    This is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.


The file COPYING in the Rpad top-level directory is a copy of the 'GNU
General Public License'.
 -->

  <head>
    <title>More GUI Examples</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <script type="text/javascript" src="editor/Rpad_loader.js">
    </script>
  </head>

  <body>
<style>
.Tabbox, .Tabpanel, .Tabdisplay {
  behavior:url(js/tabbox.htc);
  -moz-binding: url(js/moz-behaviors.xml#tabbox.htc);
}
span.tree li {
    behavior:url(js/tree.htc);
    -moz-binding: url(js/moz-behaviors.xml#tree.htc);
}

span.tablesortheader  {
    cursor: pointer ;
    behavior:url(js/tablesort.htc);
    -moz-binding: url(js/moz-behaviors.xml#tablesort.htc);
}

/* R syntax highlighting */
.Rpad_input {
	/* R-highlighter for explorer */
	behavior: url(js/R-highlight.htc);
	/* R-highlighter for mozilla */
	-moz-binding: url(js/moz-behaviors.xml#R-highlight.htc);
}

  </style>
      <h2>Advanced GUIs</h2>

<p>Standard HTML widgets are somewhat limited. You can create more 
complicated Rpad pages by including javascript
in the Rpad page. On the internet, you can find a wide variety of
scripts that can add menus and other widgets. The problem is that
there are a lot of garbage scripts on the web. One interesting approach is to use IE
behaviors, which can attach javascript actions to styles. Then
generating a GUI is as easy as applying styles, either in a CSS or
directly in the HTML file. Dean Edwards has extended this concept to
also work in Mozilla (<span contenteditable="false"><a href="http://dean.edwards.name/moz-behaviors/"
target="_blank">moz-behaviors</a></span>). Dean's scripts plus those of
Dr. Detlef Groth (<span contenteditable="false"><a
href="http://goblet.molgen.mpg.de/moz-behaviors-example/findex.html" 
target="_blank">examples</a></span>) form a useful set of GUI generation tools that are
open source (Creative Commons License). Among the utility routines
that they've developed are (these are in the Rpad/js directory):</p>
<ul>
<li>tablesort.htc -- This is how we get table outputs that 
are sortable in Rpad.</li>
<li>tabbox.htc -- Tab boxes.</li>
<li>tree.htc -- Expandable/collapsable tree widget.</li>
<li>R-highlight.htc -- Syntax highlighting of R code.</li>
<li>searchlist.htc -- Not sure about this one.</li>
</ul>

<p>Like most Rpad GUI's, you can hard-wire the GUI into the HTML page, or
you can use R to generate it. Here's an example of a hard-wired tab
box. You could use this if you have a lot of data that needs to be
entered in several categories.</p>

<span contenteditable="false">
<table border="1" cellpadding="0" cellspacing="0" height="50%"><tr><td>
<table border="0" cellpadding="5" cellspacing="0" style="background-color: beige;"  height="100%">
  <tr height="20px">
    <th width="100"><div class="Tabbox">Tab1 </div></th>
    <th width="100"><div class="Tabbox">Tab2 </div></th>
    <th width="100"><div class="Tabbox">Tab3 </div></th>
  </tr>
  <tr>
    <td colspan="3" style="border-top-width: 0">
      <div class="Tabdisplay"> </div>
      <div class="Tabpanel"><p> 
      first text
      first text
      first text
      first text
      </p> </div>
      <div class="Tabpanel"> <p>
      second text
      second text
      second text
      second text
      </p> </div>
      <div class="Tabpanel"> <p>
      third text
      third text
      third text
      third text
      </p> </div>
    </td>      
  </tr>
</table>
</td></tr></table>
</span>

<p>Here's an example of an R generated GUI: an expandable tree
widget. In this case, it's used to display the output of R lists. You
may also note the syntax highlighting on the R code. While that's a
desireable feature, the syntax highlighting is fixed: it only
highlights the code as it is stored on the server. I modified a
javascript syntax highlighter that Dean Edwards created. It won't
automatically update as you type like ESS or other syntax-highlighting
editor. It would be nice to extend the concept to allow automatic
highlighting, but it's a nontrivial problem (I couldn't think of any
quick hacks to extend it).</p>

<span contenteditable="false"><input onclick=
      "javascript:top.Rpad_calculate()" value="Run" type=
      "button"></span>

<pre class="Rpad_input" rpad_type="R">
HTML.list = function (x, file = .HTML.file, first = TRUE,
                      append = TRUE, collapsed = TRUE, align="left", ...)
# This replaces the HTML.list in R2HTML.
# It creates an expandable tree that's collapsed by default.
# This uses Detlef Groth's tree.htc behavior.
# The tree.htc is attached in the style heading of 
# this html file.
# Adding an expandable tree is as easy as wrapping standard HTML
# lists with &lt;span class='tree'&gt;. 

{
  cat("\n", file = file, append = append, ...)
  if (first) { # IE needs contenteditable off
    cat("&lt;div contenteditable='false'&gt;&lt;span class='tree'&gt;&lt;ul&gt;", 
        file = file, append = TRUE, sep = "\n")
  }
  for (i in seq(along=x)) {
    cat('&lt;li style="list-style-image:url(img/', ifelse(collapsed,"plus","minus"),'.gif);',
        ' color: rgb(0, 0, 51); cursor: pointer;"&gt;',
        file = file, append = TRUE, sep = "")
    cat(names(x)[i]) 
    cat("&lt;ul", ifelse(collapsed,"style='display:none'", ""), "&gt;", 
        file = file, append = TRUE, sep = "\n")
    HTML(x[[i]], file = file, first = FALSE, collapsed=collapsed, align=align, ...)
    cat("&lt;/ul&gt;&lt;/li&gt;", file = file, append = TRUE, sep = "\n")
  }
  if (first) {
    cat("&lt;/ul&gt;&lt;/span&gt;&lt;/div&gt;", file = file, append = TRUE, sep = "\n")
  } 
}

# make a list to use as an example:
l = list(a = list(aa = 1, 
                  ab = data.frame(x = c(1,2,3), 
                                  y = c(4,2,1)),
                  ac = list(aca = 1, 
                            acb = 2)),
         data = data.frame(a = seq(5), 
                           l = LETTERS[1:5]))
HTMLon()
HTMLh3("A collapsed list (the default)")
HTML(l)
HTMLh3("A fully expanded list:")
HTML(l$a,collapsed=FALSE)

# make a big list:
HTMLh3("A big list:")
data(iris)
fit = unclass(lm(Petal.Width~Sepal.Length+Petal.Length+Sepal.Width,data=iris))
HTML(fit)
 
</pre>

<br><br><br><sub>by Tom Short, tshort@eprisolutions..com, Copyright 2005. EPRI Solutions, Inc., license: GNU GPL v2 or greater</sub>
  </body>
</html>

